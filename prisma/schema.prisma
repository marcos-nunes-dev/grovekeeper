generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model GrovekeeperStatistics {
  id               String   @id @default("singleton")
  // Regear stats
  deathsAnalyzed   BigInt   @default(0)
  silverCalculated BigInt   @default(0)
  // Profile stats
  playersTracked   BigInt   @default(0)
  totalPveFame     BigInt   @default(0)
  totalPvpFame     BigInt   @default(0)
  updatedAt        DateTime @updatedAt

  @@map("statistics")
}

model GuildHistory {
  id         String   @id @default(cuid())
  playerName String
  guildName  String
  firstSeen  DateTime @default(now())
  lastSeen   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([playerName, guildName], name: "playerName_guildName")
  @@index([playerName])
  @@index([guildName])
}

model PlayerCache {
  id             String   @id
  playerName     String   @unique
  guildName      String?
  killFame       BigInt
  deathFame      BigInt
  pveTotal       BigInt
  gatheringTotal BigInt   @default(0)
  craftingTotal  BigInt   @default(0)
  hasDeepSearch  Boolean  @default(false)
  updatedAt      DateTime @default(now())

  @@index([playerName])
}

model PlayerEvent {
  id         String   @id // Murder Ledger event ID
  playerId   String // Player's ID for efficient querying
  playerName String // Player's name for efficient querying
  timestamp  DateTime // Event timestamp for ordering and comparing
  eventType  String // "KILL" or "DEATH" for filtering
  eventData  Json // Full event data as JSON
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([playerId, timestamp(sort: Desc)]) // For efficient querying of player's latest events
  @@index([playerName, timestamp(sort: Desc)]) // For efficient querying by player name
}
