generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model GrovekeeperStatistics {
  id               String   @id @default("singleton")
  // Regear stats
  deathsAnalyzed   BigInt   @default(0)
  silverCalculated BigInt   @default(0)
  // Profile stats
  playersTracked   BigInt   @default(0)
  totalPveFame     BigInt   @default(0)
  totalPvpFame     BigInt   @default(0)
  updatedAt        DateTime @updatedAt

  @@map("statistics")
}

model GuildHistory {
  id         String   @id @default(cuid())
  playerName String
  guildName  String
  firstSeen  DateTime @default(now())
  lastSeen   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([playerName, guildName], name: "playerName_guildName")
  @@index([playerName])
  @@index([guildName])
}

model PlayerCache {
  id             String   @id
  playerName     String   @unique
  guildName      String?
  killFame       BigInt
  deathFame      BigInt
  pveTotal       BigInt
  gatheringTotal BigInt   @default(0)
  craftingTotal  BigInt   @default(0)
  hasDeepSearch  Boolean  @default(false)
  updatedAt      DateTime @default(now())

  @@index([playerName])
}

model PlayerEvent {
  id         String   @id // Murder Ledger event ID
  playerId   String // Player's ID for efficient querying
  playerName String // Player's name for efficient querying
  timestamp  DateTime // Event timestamp for ordering and comparing
  eventType  String // "KILL" or "DEATH" for filtering
  eventData  Json // Full event data as JSON
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([playerId, timestamp(sort: Desc)]) // For efficient querying of player's latest events
  @@index([playerName, timestamp(sort: Desc)]) // For efficient querying by player name
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  discordId     String?      @unique
  accounts      Account[]
  sessions      Session[]
  builds        Build[]
  compositions  Composition[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Build {
  id           String       @id @default(cuid())
  name         String
  class        String?
  content      String?
  difficulty   String?
  costTier     String?
  instructions String?
  status       String      // 'published' | 'draft' | 'stale'
  equipment    Json        // Store equipment as JSON
  spells       Json        // Store spells as JSON
  swaps        Json        // Store swaps as JSON
  authorId     String      // Foreign key to User
  author       User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  classSection ClassSection? @relation(fields: [classSectionId], references: [id], onDelete: Cascade)
  classSectionId String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([authorId])
  @@index([classSectionId])
}

model ClassSection {
  id            String   @id @default(cuid())
  name          String
  builds        Build[]
  composition   Composition @relation(fields: [compositionId], references: [id], onDelete: Cascade)
  compositionId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([compositionId])
}

model Composition {
  id            String   @id @default(cuid())
  name          String
  contentType   String?
  description   String?
  tags          String[] // Store tags as array
  classSections ClassSection[]
  authorId      String   // Foreign key to User
  author        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([authorId])
}
