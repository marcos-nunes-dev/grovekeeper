1|const handleCalculate = () => {
2|  if (!urlValidation.isValid) return
3|  if (mode === 'group') {
4|    // For now, just return as group mode is not implemented
5|    return
6|  }
7|  calculate()
8|}
9|
10|// Use external or internal state based on what's provided
11|const customCalculation = externalCustomCalculation ?? internalCustomCalculation
12|const ignoredItems = externalIgnoredItems ?? internalIgnoredItems
13|const handleToggleItem = externalOnToggleItem ?? ((itemId: string, quality: number) => {
14|  const key = `${itemId}-${quality}`
15|  const newIgnored = new Set(internalIgnoredItems)
16|  if (newIgnored.has(key)) {
17|    newIgnored.delete(key)
18|  } else {
19|    newIgnored.add(key)
20|  }
21|  setInternalIgnoredItems(newIgnored)
22|})
23|const handleToggleAll = externalOnToggleAll ?? ((items: RegearItem[]) => {
24|  const newIgnored = new Set(internalIgnoredItems)
25|  const allKeys = items.map(item => `${item.id}-${item.quality}`)
26|  const allAreIgnored = allKeys.every(key => internalIgnoredItems.has(key))
27|
28|  if (allAreIgnored) {
29|    allKeys.forEach(key => newIgnored.delete(key))
30|  } else {
31|    allKeys.forEach(key => newIgnored.add(key))
32|  }
33|  setInternalIgnoredItems(newIgnored)
34|}) 
35|
36|// Update stats with total value and increment deaths by the number of results
37|if (!updateStats.isPending) {
38|  hasUpdatedStats.current = true
39|  updateStats.mutate({
40|    value: result.total.value,
41|    deathsCount: result.results.length
42|  })
43|} 